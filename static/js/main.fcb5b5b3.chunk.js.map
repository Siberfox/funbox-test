{"version":3,"sources":["components/card-item/card-item.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","id","taste","quantity","weight","gift","disabled","disabledText","selected","selectedText","toggleSelect","className","onClick","href","CardList","items","map","item","key","App","useState","setItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RA8CeA,G,MA1CF,SAAC,GAWP,IAVLC,EAUI,EAVJA,GACAC,EASI,EATJA,MACAC,EAQI,EARJA,SACAC,EAOI,EAPJA,OACAC,EAMI,EANJA,KACAC,EAKI,EALJA,SACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,OACE,wBAAIC,UAAU,kBAAkBC,QAAS,kBAAMF,EAAaT,KAC1D,yBAAKU,UAAU,cACb,8KACA,wBAAIA,UAAU,oBAAd,8CACA,uBAAGA,UAAU,oBAAoBT,GACjC,8BACGC,EACD,6BACCE,GAEH,yBAAKM,UAAU,qBACZP,EACD,gDAIHE,EACC,uBAAGK,UAAU,iBAAiBJ,GAC5BC,EACF,uBAAGG,UAAU,iBAAiBF,GAE9B,uBAAGE,UAAU,iBAAb,uIAC6B,uBAAGE,KAAK,KAAR,iCCvBtBC,G,MAVE,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOL,EAAmB,EAAnBA,aACzB,OACE,wBAAIC,UAAU,eACXI,EAAMC,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,eAAMC,IAAKD,EAAKhB,IAAQgB,EAAxB,CAA8BP,aAAcA,W,MCsDrCS,MA1Df,WAAgB,IAAD,EACaC,mBAAS,CACjC,CACEnB,GAAI,EACJC,MAAO,+CACPC,SAAU,0CACVC,OAAQ,MACRC,KAAM,6EACNG,UAAU,EACVC,aAAc,4LACdH,UAAU,EACVC,aAAc,gKAEhB,CACEN,GAAI,EACJC,MAAO,wCACPC,SAAU,0CACVC,OAAQ,IACRC,KAAM,+EACNG,UAAU,EACVC,aAAc,oPACdH,UAAU,EACVC,aAAc,2JAEhB,CACEN,GAAI,EACJC,MAAO,wCACPC,SAAU,2CACVC,OAAQ,IACRC,KAAM,qFACNG,UAAU,EACVC,aAAc,8LACdH,UAAU,EACVC,aAAc,2JAjCL,mBACNQ,EADM,KACCM,EADD,KAgDb,OACE,yBAAKV,UAAU,OACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,gBAAd,sIACA,kBAAC,EAAD,CAAUI,MAAOA,EAAOL,aAfT,SAACT,GACpBoB,EACEN,EAAMC,KAAI,SAACC,GAIT,OAHIA,EAAKhB,KAAOA,IACdgB,EAAKT,UAAYS,EAAKT,UAEjBS,YCrCKK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fcb5b5b3.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./card-item.styles.scss\";\n\nconst Card = ({\n  id,\n  taste,\n  quantity,\n  weight,\n  gift,\n  disabled,\n  disabledText,\n  selected,\n  selectedText,\n  toggleSelect,\n}) => {\n  return (\n    <li className=\"card__container\" onClick={() => toggleSelect(id)}>\n      <div className=\"card__item\">\n        <span>Сказочное заморское яство</span>\n        <h2 className=\"card__item-title\">Нямушка</h2>\n        <p className=\"card__item-taste\">{taste}</p>\n        <span>\n          {quantity}\n          <br />\n          {gift}\n        </span>\n        <div className=\"card__item-weight\">\n          {weight}\n          <span>КГ</span>\n        </div>\n      </div>\n\n      {disabled ? (\n        <p className=\"card__message\">{disabledText}</p>\n      ) : selected ? (\n        <p className=\"card__message\">{selectedText}</p>\n      ) : (\n        <p className=\"card__message\">\n          Чего сидишь? Порадуй котэ, <a href=\"_\">купи.</a>\n        </p>\n      )}\n    </li>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nimport Card from \"../card-item/card-item.component\";\n\nimport \"./card-list.styles.scss\";\n\nconst CardList = ({ items, toggleSelect }) => {\n  return (\n    <ul className=\"cards__list\">\n      {items.map((item) => (\n        <Card key={item.id} {...item} toggleSelect={toggleSelect} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CardList;\n","import React, { useState } from \"react\";\n\nimport CardList from \"./components/card-list/card-list.component\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  const [items, setItems] = useState([\n    {\n      id: 1,\n      taste: \"с фуа-гра\",\n      quantity: \"10 порций\",\n      weight: \"0,5\",\n      gift: \"мышь в подарок\",\n      selected: false,\n      selectedText: \"Печень утки разварная с артишоками.\",\n      disabled: false,\n      disabledText: \"Печалька, с фуа-гра закончился.\",\n    },\n    {\n      id: 2,\n      taste: \"с рыбой\",\n      quantity: \"40 порций\",\n      weight: \"2\",\n      gift: \"2 мыши в подарок\",\n      selected: false,\n      selectedText: \"Головы щучьи с чесноком да свежайшая сёмгушка.\",\n      disabled: false,\n      disabledText: \"Печалька, с рыбой закончился.  \",\n    },\n    {\n      id: 3,\n      taste: \"с курой\",\n      quantity: \"100 порций\",\n      weight: \"5\",\n      gift: \"5 мышей в подарок\",\n      selected: false,\n      selectedText: \"Филе из цыплят с трюфелями в бульоне.\",\n      disabled: true,\n      disabledText: \"Печалька, с курой закончился.\",\n    },\n  ]);\n\n  const toggleSelect = (id) => {\n    setItems(\n      items.map((item) => {\n        if (item.id === id) {\n          item.selected = !item.selected;\n        }\n        return item;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container cards\">\n        <h1 className=\"cards__title\">Ты сегодня покормил кота?</h1>\n        <CardList items={items} toggleSelect={toggleSelect} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}