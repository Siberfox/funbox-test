{"version":3,"sources":["assets/Photo.png","components/card-item/card-item.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","id","taste","quantity","weight","gift","disabled","disabledText","selected","selectedText","toggleSelect","satisfied","useState","hoverSelect","setHoverSelect","onMouseEnter","className","onClick","selectCard","src","CatImage","alt","href","e","preventDefault","CardList","items","map","item","key","App","setItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,mC,2NC4G5BC,G,MArGF,SAAC,GAYP,IAXLC,EAWI,EAXJA,GACAC,EAUI,EAVJA,MACAC,EASI,EATJA,SACAC,EAQI,EARJA,OACAC,EAOI,EAPJA,KACAC,EAMI,EANJA,SACAC,EAKI,EALJA,aACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,aACAC,EACI,EADJA,UACI,EACkCC,oBAAS,GAD3C,mBACGC,EADH,KACgBC,EADhB,KAYJ,OACE,wBACEC,aAAc,WAVZP,GAAUM,GAAe,IAa3BE,UACE,mBACCV,EACG,4BACAO,EACA,kCACAL,EACA,4BACA,4BAGN,yBAAKQ,UAAU,sBACb,yBACEA,UAAU,aACVC,QAAS,YAxBE,SAAChB,GAClBS,EAAaT,GACba,GAAe,GAuBPI,CAAWjB,KAGb,0BAAMe,UAAU,mBAAhB,gJACA,0BAAMA,UAAU,0BAAhB,2FACA,wBAAIA,UAAU,oBAAd,8CACA,uBAAGA,UAAU,oBAAoBd,GACjC,0BAAMc,UAAU,uBACbb,EACD,6BACCE,EACD,6BACCM,EAAY,8FAAqB,IAEpC,yBAAKK,UAAU,mBAAmBG,IAAKC,IAAUC,IAAI,uBACrD,yBAAKL,UAAU,qBACZZ,EACD,iDAKLE,EACC,uBAAGU,UAAU,iBAAiBT,GAC5BC,EACF,uBAAGQ,UAAU,iBAAiBP,GAE9B,uBAAGO,UAAU,iBAAb,sIAC6B,IAC3B,uBACEM,KAAK,IACLN,UAAU,aACVC,QAAS,SAACM,GACRA,EAAEC,iBACFd,EAAaT,KALjB,iCChEKwB,G,MAVE,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOhB,EAAmB,EAAnBA,aACzB,OACE,wBAAIM,UAAU,eACXU,EAAMC,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,eAAMC,IAAKD,EAAK3B,IAAQ2B,EAAxB,CAA8BlB,aAAcA,W,MCyDrCoB,MA7Df,WAAgB,IAAD,EACalB,mBAAS,CACjC,CACEX,GAAI,EACJC,MAAO,+CACPC,SAAU,0CACVC,OAAQ,MACRC,KAAM,6EACNG,UAAU,EACVC,aAAc,4LACdH,UAAU,EACVC,aAAc,+JACdI,WAAW,GAEb,CACEV,GAAI,EACJC,MAAO,wCACPC,SAAU,0CACVC,OAAQ,IACRC,KAAM,+EACNG,UAAU,EACVC,aAAc,oPACdH,UAAU,EACVC,aAAc,0JACdI,WAAW,GAEb,CACEV,GAAI,EACJC,MAAO,wCACPC,SAAU,2CACVC,OAAQ,IACRC,KAAM,qFACNG,UAAU,EACVC,aAAc,8LACdH,UAAU,EACVC,aAAc,wJACdI,WAAW,KApCF,mBACNe,EADM,KACCK,EADD,KAmDb,OACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,gBAAd,sIACA,kBAAC,EAAD,CAAUU,MAAOA,EAAOhB,aAfT,SAACT,GACpB8B,EACEL,EAAMC,KAAI,SAACC,GAIT,OAHIA,EAAK3B,KAAOA,IACd2B,EAAKpB,UAAYoB,EAAKpB,UAEjBoB,YCxCKI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1061cd10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Photo.fe3069ab.png\";","import React, { useState } from \"react\";\n\nimport CatImage from \"../../assets/Photo.png\";\nimport PropTypes from \"prop-types\";\n\nimport \"./card-item.styles.scss\";\n\nconst Card = ({\n  id,\n  taste,\n  quantity,\n  weight,\n  gift,\n  disabled,\n  disabledText,\n  selected,\n  selectedText,\n  toggleSelect,\n  satisfied,\n}) => {\n  const [hoverSelect, setHoverSelect] = useState(false);\n\n  const toggleHoverSelect = () => {\n    if (selected) setHoverSelect(true);\n  };\n\n  const selectCard = (id) => {\n    toggleSelect(id);\n    setHoverSelect(false);\n  };\n\n  return (\n    <li\n      onMouseEnter={() => {\n        toggleHoverSelect();\n      }}\n      className={\n        \"card__container\" +\n        (disabled\n          ? \" card__container_disabled\"\n          : hoverSelect\n          ? \" card__container_selected-hover\"\n          : selected\n          ? \" card__container_selected\"\n          : \" card__container_active\")\n      }\n    >\n      <div className=\"card__item-wrapper\">\n        <div\n          className=\"card__item\"\n          onClick={() => {\n            selectCard(id);\n          }}\n        >\n          <span className=\"card__item-text\">Сказочное заморское яство</span>\n          <span className=\"card__item-text_hidden\">Котэ не одобряет?</span>\n          <h2 className=\"card__item-title\">Нямушка</h2>\n          <p className=\"card__item-taste\">{taste}</p>\n          <span className=\"card__item-quantity\">\n            {quantity}\n            <br />\n            {gift}\n            <br />\n            {satisfied ? \"заказчик доволен\" : \"\"}\n          </span>\n          <img className=\"card__item-image\" src={CatImage} alt=\"кот\" />\n          <div className=\"card__item-weight\">\n            {weight}\n            <span>КГ</span>\n          </div>\n        </div>\n      </div>\n\n      {disabled ? (\n        <p className=\"card__message\">{disabledText}</p>\n      ) : selected ? (\n        <p className=\"card__message\">{selectedText}</p>\n      ) : (\n        <p className=\"card__message\">\n          Чего сидишь? Порадуй котэ,{\" \"}\n          <a\n            href=\"_\"\n            className=\"card__link\"\n            onClick={(e) => {\n              e.preventDefault();\n              toggleSelect(id);\n            }}\n          >\n            купи.\n          </a>\n        </p>\n      )}\n    </li>\n  );\n};\n\nCard.propTypes = {\n  taste: PropTypes.string,\n  quantity: PropTypes.string,\n  weight: PropTypes.string,\n  gift: PropTypes.string,\n  selected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  satisfied: PropTypes.bool,\n  selectedText: PropTypes.string,\n  disabledText: PropTypes.string,\n};\n\nexport default Card;\n","import React from \"react\";\n\nimport Card from \"../card-item/card-item.component\";\n\nimport \"./card-list.styles.scss\";\n\nconst CardList = ({ items, toggleSelect }) => {\n  return (\n    <ul className=\"cards__list\">\n      {items.map((item) => (\n        <Card key={item.id} {...item} toggleSelect={toggleSelect} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CardList;\n","import React, { useState } from \"react\";\n\nimport CardList from \"./components/card-list/card-list.component\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  const [items, setItems] = useState([\n    {\n      id: 1,\n      taste: \"с фуа-гра\",\n      quantity: \"10 порций\",\n      weight: \"0,5\",\n      gift: \"мышь в подарок\",\n      selected: false,\n      selectedText: \"Печень утки разварная с артишоками.\",\n      disabled: false,\n      disabledText: \"Печалька, с фуа-гра закончился.\",\n      satisfied: false,\n    },\n    {\n      id: 2,\n      taste: \"с рыбой\",\n      quantity: \"40 порций\",\n      weight: \"2\",\n      gift: \"2 мыши в подарок\",\n      selected: true,\n      selectedText: \"Головы щучьи с чесноком да свежайшая сёмгушка.\",\n      disabled: false,\n      disabledText: \"Печалька, с рыбой закончился.  \",\n      satisfied: false,\n    },\n    {\n      id: 3,\n      taste: \"с курой\",\n      quantity: \"100 порций\",\n      weight: \"5\",\n      gift: \"5 мышей в подарок\",\n      selected: false,\n      selectedText: \"Филе из цыплят с трюфелями в бульоне.\",\n      disabled: true,\n      disabledText: \"Печалька, с курой закончился.\",\n      satisfied: true,\n    },\n  ]);\n\n  const toggleSelect = (id) => {\n    setItems(\n      items.map((item) => {\n        if (item.id === id) {\n          item.selected = !item.selected;\n        }\n        return item;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container cards\">\n        <h1 className=\"cards__title\">Ты сегодня покормил кота?</h1>\n        <CardList items={items} toggleSelect={toggleSelect} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}